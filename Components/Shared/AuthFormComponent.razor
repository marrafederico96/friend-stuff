@using FriendStuff.Features.Auth
@using FriendStuff.Features.Auth.DTOs

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<MudGrid Justify="Justify.Center" Class="mt-10">
    <MudItem xs="12" sm="10" md="8" lg="6" xl="5">
    <MudCard Class="pa-4" Elevation="4">
            @if (_isLogin)
            {
                <MudText Typo="Typo.h5" Class="mb-4">Login</MudText>
                <form method="post" action="/Account/Login">
                    <MudStack Spacing="2">
                    <MudTextField T="string" Label="Email" InputType="InputType.Email" Name="Email" Required="true" />
                    <MudTextField T="string" Label="Password" InputType="InputType.Password" Name="Password" Required="true" />

                    @if (!string.IsNullOrEmpty(Error))
                    {
                        <MudText Color="Color.Error">@Error</MudText>
                    }

                    <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
                        <MudText>New user? <MudLink Href="/Account/Register">Register</MudLink></MudText>
                    </MudStack>
                    </MudStack>
                    
                </form>
            }
            else
            {
                <MudText Typo="Typo.h5" Class="mb-4">Register</MudText>
                <EditForm Model="RegisterData" OnValidSubmit="Register" FormName="RegisterForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <MudStack Spacing="2">
                        <MudTextField T="string" @bind-Value="RegisterData.FirstName" Label="First Name" Required="true"/>
                        <MudTextField T="string" @bind-Value="RegisterData.LastName" Label="Last Name" Required="true"/>
                        <MudTextField T="string" @bind-Value="RegisterData.Username" Label="Username" Required="true"/>
                        <MudTextField T="string" InputType="InputType.Email" @bind-Value="RegisterData.Email" Label="Email" Required="true"/>
                        <MudTextField T="string" InputType="InputType.Password" @bind-Value="RegisterData.Password" Label="Password" Required="true"/>
                        <MudTextField T="string" InputType="InputType.Password" @bind-Value="RegisterData.ConfirmPassword" Label="Confirm Password" Required="true"/>
                    </MudStack>
                    @if (!string.IsNullOrEmpty(_error))
                    {
                        <MudText Color="Color.Error">@_error</MudText>
                    }

                    <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                        <MudText>Already registered? <MudLink Href="/Account/Login">Login</MudLink></MudText>
                    </MudStack>
                </EditForm>
            }
    </MudCard>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string? Mode { get; set; }

    private bool _isLogin;

    [SupplyParameterFromForm(Name = "RegisterForm")]
    private RegisterDto RegisterData { get; set; } = new RegisterDto();

    private string? _error = string.Empty;

    [SupplyParameterFromQuery]
    public string? Error { get; set; }

    protected override void OnParametersSet()
    {
        _isLogin = string.Equals(Mode, "Login", StringComparison.OrdinalIgnoreCase);
    }

    private async Task Register()
    {
        try
        {
            await AuthService.RegisterUser(RegisterData);
            RegisterData = new RegisterDto();
            NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
        catch (Exception)
        {
            _error = "Internal error. Try again.";
        }
    }
}
