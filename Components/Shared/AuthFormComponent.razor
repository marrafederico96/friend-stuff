@using FriendStuff.Features.Auth
@using FriendStuff.Features.Auth.DTOs

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="form-container">
    @if (_isLogin)
    {
            <form method="post" action="/Account/Login">
                <h2>Login</h2>
                <label>Email:
                    <input  Name="Email" type="text" placeholder="Email" required />
                    </label>
                <label>Password:
                    <input Name="Password"  required type="password" placeholder="Password" />
                    </label>
                @if (!string.IsNullOrEmpty(Error))
                {
                    <p>@Error</p>
                }
                <button>Login</button>
                <p>New user? <a href="/Account/Register">Register</a></p>
            </form>
    }
    else
    {
            <EditForm Model="RegisterData" OnValidSubmit="Register" FormName="RegisterForm">
                <DataAnnotationsValidator />
                <h2>Register</h2>
                <label>First Name:
                    <InputText type="text" @bind-Value="RegisterData.FirstName" required placeholder="First Name"/>
                </label>
                <label>Last Name:
                    <InputText type="text" @bind-Value="RegisterData.LastName" required placeholder="Last Name"/>
                </label>
                <label>Username:
                    <InputText type="text" @bind-Value="RegisterData.Username" required placeholder="Username" />
                </label>
                <label>Email:
                    <InputText type="email" @bind-Value="RegisterData.Email" required placeholder="Email"/>
                </label>
                <label>Password:
                    <InputText type="password" @bind-Value="RegisterData.Password" required placeholder="Password"/>
                </label>
                <label>Confirm Password:
                    <InputText type="password" @bind-Value="RegisterData.ConfirmPassword" required  placeholder="Confirm Password"/>
                </label>
                
                @if (!string.IsNullOrEmpty(_error))
                {
                    <p>@Error</p>
                }
                <button type="submit">Register</button>
                <p>Already register? <a href="/Account/Login">Login</a></p>
            </EditForm>

    }
</div>
@code {
    [Parameter]
    public string? Mode { get; set; }

    private bool _isLogin;

    [SupplyParameterFromForm(Name = "RegisterForm")]
    private RegisterDto RegisterData { get; set; } = new RegisterDto();

    private string? _error = string.Empty;

    [SupplyParameterFromQuery]
    public string? Error { get; set; }

    protected override void OnParametersSet()
    {
        _isLogin = string.Equals(Mode, "Login", StringComparison.OrdinalIgnoreCase);
    }

    private async Task Register()
    {
        try
        {
            await AuthService.RegisterUser(RegisterData);
            RegisterData = new RegisterDto();
            NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
        catch (Exception)
        {
            _error = "Internal error. Try again.";
        }
    }


}
