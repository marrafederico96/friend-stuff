@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.Group
@using FriendStuff.Features.Group.DTOs

@inject IGroupService GroupService

<section class="group-info">
    <h2>Your Groups</h2>

    @if (GroupsInfo is { Count: > 0 })
    {
        <div class="group-link">
        @foreach (var group in GroupsInfo)
        { 
            <a href="@GenerateGroupHref(group.GroupName)">
                <p>@group.GroupName</p>
                <p>Members: @group.Members.Count</p>
            </a>
        }
        </div>
    }
    else
    {
        <p>@_error</p>
    }
    <GroupFormComponent UserInfo="@UserInfo" />
</section>

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfoDto? UserInfo { get; set; }

    [Parameter]
    public string? GroupName { get; set; }
    
    private List<GroupInfoDto>? GroupsInfo { get; set; }
    private string? _error = string.Empty;
    protected override async Task OnParametersSetAsync()
    
    {
        try
        {
            if (UserInfo != null)
            {
                GroupsInfo = await GroupService.GetGroupInfo(UserInfo.Username);

            }
        }
        catch (Exception)
        {
            _error = "No groups found";
        }
    }
    
    private string GenerateGroupHref(string groupName)
    {
        if (string.IsNullOrWhiteSpace(groupName))
            return string.Empty;

        var cleaned = new string(groupName
            .ToLowerInvariant()
            .Replace(" ", "-")
            .Where(c => char.IsLetterOrDigit(c) || c == '-')
            .ToArray());

        return $"/Group/{cleaned}";
    }
}