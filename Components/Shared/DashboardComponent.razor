@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.Group
@using FriendStuff.Features.Group.DTOs

@inject IGroupService GroupService

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h4">Your Groups</MudText>
        </MudPaper>
        <GroupFormComponent UserInfo="@UserInfo"/>
    </MudItem>

    @if (GroupsInfo is { Count: > 0 })
    {
        @foreach (var group in GroupsInfo)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard>
                    <MudLink Style="text-decoration: none;" Href="@GenerateGroupHref(group.GroupName)">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Style="color: #c2c2c5">
                                @group.GroupName
                            </MudText>
                            <MudText  Style="color: #c2c2c5">
                                @group.Members.Count @(" Member" + (group.Members.Count == 1 ? "" : "s"))
                            </MudText>
                        </MudCardContent>
                    </MudLink>
                </MudCard>
            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12">
            <MudText>@_error</MudText>
        </MudItem>
    }

    <MudItem xs="12" class="mt-6">
        <BalanceComponent UserInfo="@UserInfo" />
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfoDto? UserInfo { get; set; }

    [Parameter]
    public string? GroupName { get; set; }

    private List<GroupInfoDto>? GroupsInfo { get; set; }
    private string? _error = "No groups found";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (UserInfo != null)
            {
                GroupsInfo = await GroupService.GetGroupInfo(UserInfo.Username);
            }
        }
        catch
        {
            _error = "No groups found";
        }
    }

    private string GenerateGroupHref(string groupName)
    {
        if (string.IsNullOrWhiteSpace(groupName))
            return string.Empty;

        var cleaned = new string(groupName
            .ToLowerInvariant()
            .Trim()
            .Replace(" ", "-")
            .Where(c => char.IsLetterOrDigit(c) || c == '-')
            .ToArray());

        return $"/Group/{cleaned}";
    }
}
