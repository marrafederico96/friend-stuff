@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.Group
@using FriendStuff.Features.Group.DTOs

@inject IGroupService GroupService

<h2 style="margin: 20px 0; font-size: 1.8rem;">Your Groups</h2>

<MudGrid Spacing="@Spacing" Justify="Justify.FlexStart">
    @if (GroupsInfo is { Count: > 0 })
    {
        @foreach (var group in GroupsInfo)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudPaper>
                    <MudButton Style="width: 100%; justify-content: flex-start; align-items: flex-start;" Href="@GenerateGroupHref(group.GroupName)">
                        <div style="display: flex; flex-direction: column;">
                        <MudText>@group.GroupName</MudText>
                        <MudText>Members: @group.Members.Count</MudText>
                        </div>
                    </MudButton>
                </MudPaper>
            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12">
            <MudText>@_error</MudText>
        </MudItem>
    }
    <MudFlexBreak />
    <MudItem>
        <GroupFormComponent UserInfo="@UserInfo" />
    </MudItem>
</MudGrid>

@code {
    private int Spacing { get; set; } = 6;

    [CascadingParameter(Name = "UserInfo")]
    public UserInfoDto? UserInfo { get; set; }

    [Parameter]
    public string? GroupName { get; set; }
    
    private List<GroupInfoDto>? GroupsInfo { get; set; }
    private string? _error = string.Empty;
    protected override async Task OnParametersSetAsync()
    
    {
        try
        {
            if (UserInfo != null)
            {
                GroupsInfo = await GroupService.GetGroupInfo(UserInfo.Username);

            }
        }
        catch (Exception)
        {
            _error = "No groups found";
        }
    }
    
    private string GenerateGroupHref(string groupName)
    {
        if (string.IsNullOrWhiteSpace(groupName))
            return string.Empty;

        var cleaned = new string(groupName
            .ToLowerInvariant()
            .Replace(" ", "-")
            .Where(c => char.IsLetterOrDigit(c) || c == '-')
            .ToArray());

        return $"/Group/{cleaned}";
    }
}