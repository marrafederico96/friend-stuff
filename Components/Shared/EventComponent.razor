@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.EventExpense
@using FriendStuff.Features.EventExpense.DTOs
@using FriendStuff.Features.Group.DTOs
@using FriendStuff.Features.GroupEvent.DTOs

@rendermode InteractiveServer

@inject IExpenseService ExpenseService

@if (_event != null)
{
    <h2>@_event.EventName</h2>
    <div class="form-container">
        <EditForm Model="ExpenseDto" OnValidSubmit="AddExpense" FormName="ExpenseForm">
            <InputNumber @bind-Value="ExpenseDto.Amount" placeholder="Amount" required  />
            <InputText @bind-Value="ExpenseDto.ExpenseName" placeholder="Expense Name" required />
            <div class="input-checkbox"> 
                @foreach (var user in _selectableMembers)
                {
                    <input type="checkbox" 
                           id="@($"checkbox-{user.Username}")"
                           checked="@ExpenseDto.ParticipantUsername.Contains(user.Username)"
                           @onchange="@((e) => OnParticipantCheckboxChange(e, user.Username))" />
                    <label for="@($"checkbox-{user.Username}")">@user.Username</label>
                    <br/>
                }
            </div>
            <button type="submit">Add Expense</button>
        </EditForm>
    </div>
    <h3>Expenses</h3>
    <ul class="expense-list">
        @foreach (var expense in _group.GroupEvents.SelectMany(evt => evt.Expenses))
        {
            <li>Expense:
                @expense.ExpenseName 
                <p>Amount: @expense.Amount (@expense.PayerUsername)</p>
                <p>Participants: 
                    @foreach (var u in expense.ParticipantUsername)
                    {
                        <span>@u</span>
                    }
                </p>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public string? GroupName { get; set; }
    [Parameter] public string? EventName { get; set; }
    [Parameter] public UserInfoDto? UserInfo { get; set; }

    private string? _error;

    private ExpenseDto ExpenseDto { get; set; } = new ExpenseDto();
    private List<GroupMemberDto> _selectableMembers = [];

    private EventDto? _event;
    private GroupDto? _group;

    protected override void OnParametersSet()
    {
        if (UserInfo == null) return;
        _event = UserInfo.UserGroups
            .SelectMany(e => e.GroupEvents)
            .FirstOrDefault(e => e.NormalizedEventName.Equals(EventName));
        _group = UserInfo.UserGroups
            .FirstOrDefault(g => g.NormalizeGroupName.Equals(GroupName));
        if (_group != null)
        {
            _selectableMembers = _group.GroupMembers
                .Where(member => member.Username != UserInfo.Username).ToList();
        }
    }

    private void OnParticipantCheckboxChange(ChangeEventArgs e, string username)
    {
        if (e.Value != null && (bool)e.Value)
        {
            if (!ExpenseDto.ParticipantUsername.Contains(username))
            {
                ExpenseDto.ParticipantUsername.Add(username);
            }
        }
        else
        {
            ExpenseDto.ParticipantUsername.Remove(username);
        }
    }

    public async Task AddExpense()
    {
        try
        {
            if (UserInfo != null && _event != null)
            {
                ExpenseDto.PayerUsername = UserInfo.Username;
                ExpenseDto.EventName = _event.NormalizedEventName;

                await ExpenseService.AddExpense(ExpenseDto);
                ExpenseDto = new ExpenseDto();
            }
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
            Console.WriteLine($"Error adding expense: {_error}");
        }
    }

}