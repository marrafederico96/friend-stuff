@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.EventExpense
@using FriendStuff.Features.EventExpense.DTOs
@using FriendStuff.Features.Group.DTOs
@using FriendStuff.Features.GroupEvent.DTOs

@rendermode InteractiveServer

@inject IExpenseService ExpenseService
@inject NavigationManager NavigationManager

@if (_event != null)
{
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h4">@_event.EventName</MudText>
    </MudPaper>
    <MudPaper Class="pa-4">
        <EditForm Model="ExpenseDto" FormName="EventForm" OnValidSubmit="AddExpense">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudNumericField T="decimal" @bind-Value="ExpenseDto.Amount" Label="Amount" Required="true" RequiredError="Amount is required"/>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="ExpenseDto.ExpenseName" Label="Expense Name" Required="true" RequiredError="Expense name is required"/>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle1" Class="mt-4 mb-2">Participants</MudText>
                        @foreach (var user in _selectableMembers)
                        {
                            <MudCheckBox T="bool" Label="@user.Username" @bind-Value="_participants[user.Username]" />                        }
                </MudItem>
                @if (!string.IsNullOrEmpty(_error))
                {
                    <MudItem xs="12">
                        <MudText Color="Color.Error">@_error</MudText>
                    </MudItem>
                }
                <MudItem xs="12">
                    @if (string.IsNullOrEmpty(_error))
                    {
                        <MudText Color="Color.Error">@_error</MudText>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                        Add Expense
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>

    <MudDivider Class="my-6"/>

    <MudText Typo="Typo.h5">Expenses</MudText>
    @if (_group?.GroupEvents.SelectMany(evt => evt.Expenses).Any() == true)
    {
        <MudList T="object">
            @foreach (var expense in _group.GroupEvents.SelectMany(evt => evt.Expenses))
            {
                <MudListItem>
                    <MudPaper Class="pa-3 w-full">
                        <MudText Typo="Typo.subtitle1">@expense.ExpenseName</MudText>
                        <MudText Typo="Typo.body2">
                            Amount: @expense.Amount€ — Payer: <strong>@expense.PayerUsername</strong>
                        </MudText>
                        <MudText Typo="Typo.body2">Participants:
                            @if (expense.ParticipantUsername.Count > 0)
                            {
                                @foreach (var u in expense.ParticipantUsername)
                                {
                                    <span>@u&nbsp;</span>
                                }
                            }
                            else
                            {
                                <span>No Participants</span>
                            }
                        </MudText>
                    </MudPaper>
                </MudListItem>
            }
        </MudList>
    }

    else
    {
        <MudText>No expenses found.</MudText>
    }
}


@code {
    [Parameter] public string? GroupName { get; set; }
    [Parameter] public string? EventName { get; set; }
    [Parameter] public UserInfoDto? UserInfo { get; set; }
    private string? _error;

    private ExpenseDto ExpenseDto { get; set; } = new ExpenseDto();
    private List<GroupMemberDto> _selectableMembers = [];
    private Dictionary<string, bool> _participants = new Dictionary<string, bool>();
    private EventDto? _event;
    private GroupDto? _group;

    protected override void OnParametersSet()
    {
        if (UserInfo == null) return;
        _event = UserInfo.UserGroups
            .SelectMany(e => e.GroupEvents)
            .FirstOrDefault(e => e.NormalizedEventName.Equals(EventName));
        _group = UserInfo.UserGroups
            .FirstOrDefault(g => g.NormalizeGroupName.Equals(GroupName));
        if (_group != null)
        {
            _selectableMembers = _group.GroupMembers
                .Where(member => member.Username != UserInfo.Username).ToList();
        }
        
        foreach (var member in _selectableMembers)
        {
            _participants.Add(member.Username, ExpenseDto.ParticipantUsername.Contains(member.Username));
        }
        
    }

    public async Task AddExpense()
    {
        try
        {
            if (UserInfo != null && _event != null)
            {
                ExpenseDto.PayerUsername = UserInfo.Username;
                ExpenseDto.EventName = _event.NormalizedEventName;
                
                ExpenseDto.ParticipantUsername = _participants
                    .Where(kvp => kvp.Value)
                    .Select(kvp => kvp.Key)
                    .ToList();
                
                await ExpenseService.AddExpense(ExpenseDto);
                
                ExpenseDto = new ExpenseDto();
                InitializeParticipantsDictionary();

                NavigationManager.Refresh();
            }
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
    }
    
    private void InitializeParticipantsDictionary()
    {
        _participants.Clear();
        foreach (var member in _selectableMembers)
        {
            _participants[member.Username] = false;
        }
    }
}