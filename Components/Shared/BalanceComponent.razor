@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.EventExpense
@using FriendStuff.Features.EventExpense.DTOs
@using FriendStuff.Features.EventExpense.ExpenseRefund
@using FriendStuff.Features.Group.DTOs

@inject IExpenseService ExpenseService
@inject IRefundService RefundService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<MudGrid>
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5" Class="mb-2">Your Balance</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Calculate">
                Calculate Balance
            </MudButton>

            <MudList T="object" Class="mt-4">
                @if (_balancesWithUsers.Any())
                {
                    @foreach (var (username, amount) in _balancesWithUsers)
                    {
                        <MudListItem>
                            <MudText Color="@(amount < 0 ? Color.Success : (amount > 0 ? Color.Error : Color.Default))">
                                @switch (amount)
                                {
                                    case < 0:
                                        @:<strong>@username</strong> owes you <strong>@Math.Abs(amount):0.00€</strong>
                                        break;
                                    case > 0:
                                        @:You owe <strong>@amount:0.00€</strong> to <strong>@username</strong>
                                        break;
                                    default:
                                        @:No debt with <strong>@username</strong> 
                                        break;
                                }
                            </MudText>
                        </MudListItem>
                    }
                }
                else
                {
                    <MudText Class="mt-2">No balances yet. Click "Calculate Balance" to see results.</MudText>
                }
            </MudList>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4 mt-4 mt-md-0">
            <MudText Typo="Typo.h5" Class="mb-2">Add Refund</MudText>
            <EditForm Model="_refundDto" OnValidSubmit="AddRefund">
                <DataAnnotationsValidator />
                <MudStack Spacing="2">
                    <MudNumericField T="decimal" @bind-Value="_refundDto.Amount" Label="Amount" Required="true" Adornment="Adornment.Start" AdornmentText="€" />
                    <MudTextField T="string" @bind-Value="_refundDto.PayerUsername" Label="Payer Username" Required="true" />

                    @if (!string.IsNullOrEmpty(_error))
                    {
                        <MudAlert Severity="Severity.Error" Dense="true">@_error</MudAlert>
                    }

                    <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Secondary">Add Refund</MudButton>
                </MudStack>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public UserInfoDto? UserInfo { get; set; }

    private List<GroupMemberDto?> _groupMembers = [];
    private readonly List<(string Username, decimal Balance)> _balancesWithUsers = [];
    private RefundDto _refundDto = new();
    private string _error = string.Empty;

    private async Task Calculate()
    {
        _balancesWithUsers.Clear();
        if (UserInfo != null)
        {
            _groupMembers = UserInfo.UserGroups.SelectMany(u => u.GroupMembers.Distinct()).ToList();

            foreach (var u in _groupMembers.Where(m => m != null && m.Username != UserInfo.Username))
            {
                var dto = new BalanceDto
                {
                    PayerUsername = u.Username,
                    DebtorUsername = UserInfo.Username
                };

                var result = await ExpenseService.CalculateBalance(dto);

                if (result != 0)
                {
                    _balancesWithUsers.Add((u.Username, result));
                }
            }
        }
    }

    private async Task AddRefund()
    {
        try
        {
            if (UserInfo != null)
            {
                _refundDto.DebtorUsername = UserInfo.Username;
                await RefundService.AddRefund(_refundDto);
                _refundDto = new RefundDto();
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
    }
}
