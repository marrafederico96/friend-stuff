@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.EventExpense
@using FriendStuff.Features.EventExpense.DTOs
@using FriendStuff.Features.EventExpense.ExpenseRefund
@using FriendStuff.Features.Group.DTOs

@inject IExpenseService ExpenseService
@inject IRefundService RefundService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h2 style="font-size: 2.2rem">Your Balance</h2>
@if (_groupMembers.Count > 1)
{
    <button type="button" @onclick="Calculate">Calculate Balance</button>
    @if (_balancesWithUsers.Any())
    {
        @if (_balancesWithUsers.Any())
        {
            <ul>
                @foreach (var (username, amount) in _balancesWithUsers)
                {
                    switch (amount)
                    {
                        case < 0:
                            <li><strong>@username</strong> owes you <strong>@Math.Abs(amount).ToString("0.00")€</strong></li>
                            break;
                        case > 0:
                            <li>You owe <strong>@amount.ToString("0.00")€</strong> to <strong>@username</strong></li>
                            break;
                        case 0:
                            <li>No debt</li>
                            break;
                    }
                }
            </ul>
        }
    }

    <h2>Add Refund</h2>
    <div class="form-container">
        <EditForm Model="_refundDto" FormName="RefundForm" OnValidSubmit="AddRefund">
            <InputNumber @bind-Value="_refundDto.Amount" required placeholder="Amount" />
            <InputText @bind-Value="_refundDto.PayerUsername" required placeholder="Username" />
            @if (!string.IsNullOrEmpty(_error))
            {
                <p class="error">@_error</p>
            }
            <button type="submit">Add refund</button>
        </EditForm>
    </div>
}
else
{
    <p>You need at least 2 users in a group to calculate balances.</p>
}


@code {
    [Parameter]
    public UserInfoDto? UserInfo { get; set; }

    private List<GroupMemberDto?> _groupMembers = [];
    private readonly List<(string Username, decimal Balance)> _balancesWithUsers = [];
    private RefundDto _refundDto = new RefundDto();
    private string _error = string.Empty;
    
    private async Task Calculate()
    {
        if (UserInfo != null)
        {
            _groupMembers = UserInfo.UserGroups.SelectMany(u => u.GroupMembers.Distinct()).ToList();

            foreach (var u in _groupMembers.Where(m => m != null && m.Username != UserInfo.Username))
            {
                var dto = new BalanceDto
                {
                    PayerUsername = u.Username,
                    DebtorUsername = UserInfo.Username
                };

                var result = await ExpenseService.CalculateBalance(dto);

                if (result != 0)
                {
                    _balancesWithUsers.Add((u.Username, result));
                }
            }
        }
    }

    private async Task AddRefund()
    {
        try
        {
            if (UserInfo != null)
            {
                _refundDto.DebtorUsername = UserInfo.Username;
                await RefundService.AddRefund(_refundDto);
                _refundDto = new RefundDto();
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
        catch (InvalidOperationException e)
        {
            _error = e.Message;
        }
    }
}