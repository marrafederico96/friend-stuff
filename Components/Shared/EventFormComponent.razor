@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.GroupEvent
@using FriendStuff.Features.GroupEvent.DTOs

@inject IEventService EventService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
<MudPopoverProvider />


<MudPaper Class="pa-4" Elevation="3">
<MudText Typo="Typo.h4" Class="mb-4">Your Events</MudText>
    @if (_eventDto is { Count: > 0 })
    {
        <MudGrid>
            @foreach (var evt in _eventDto)
            {
                <MudItem xs="12">
                    <MudCard Class="h-full hover:shadow-md transition-shadow">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@evt.EventName</MudText>
                            <MudText Typo="Typo.body2">@evt.LocationName</MudText>
                            <MudText Typo="Typo.caption">@($"Start {evt.StartDate:dd-MM-yyyy} End {evt.EndDate:dd-MM-yyyy}")</MudText>                       
                            </MudCardContent>
                        <MudCardActions>
                            <MudLink Href="@($"/Group/{GroupName}/{GenerateEventHref(evt.NormalizedEventName)}")">
                                View
                            </MudLink>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudText>No events found.</MudText>
    }
    <MudDivider Class="my-6" />
    
    <MudText Typo="Typo.h5">Create New Event</MudText>
    
    <EditForm Model="EventData" FormName="EventForm" OnValidSubmit="CreateEvent" Class="mt-4">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="EventData.EventName" Label="Event Name" Required="true"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="EventData.EventDescription" Label="Event Description"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="@EventData.StartDate" Label="Start Date" Required="true"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="EventData.EndDate" Label="End Date" Required="true"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="EventData.LocationName" Label="Location Name" Required="true"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="EventData.City" Label="City"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="EventData.StreetName" Label="Street Name"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="EventData.StreetNumber" Label="Street Number"/>
            </MudItem>

            @if (!string.IsNullOrEmpty(_error))
            {
                <MudItem xs="12">
                    <MudText Color="Color.Error">@_error</MudText>
                </MudItem>
            }

            <MudItem xs="12">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                    Create Event
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>
@code {
    public EventDto EventData = new EventDto();
    [Parameter] public required string GroupName { get; set; }
    [Parameter] public required UserInfoDto UserInfo { get; set; }
    private List<EventDto?> _eventDto = [];
    private string? _error = string.Empty;
    
    protected override void OnInitialized()
    {
        EventData.StartDate = DateTime.Today;
        EventData.EndDate = DateTime.Today;
    }
    
    protected override void OnParametersSet()
    {
        _eventDto = UserInfo.UserGroups
            .Where(g => g.NormalizeGroupName.Equals(GroupName))
            .SelectMany(g => g.GroupEvents)
            .ToList();
    }
    
    private async Task CreateEvent()
    {
        try
        {
            EventData.GroupName = GroupName;
            EventData.Username = UserInfo.Username.Trim().ToUpperInvariant();
            await EventService.CreateEvent(EventData);
            EventData = new EventDto
            {
                StartDate = DateTime.Today,
                EndDate = DateTime.Today
            };
            NavigationManager.Refresh();
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
    }
    
    private string GenerateEventHref(string eventName)
    {
        if (string.IsNullOrWhiteSpace(eventName))
            return string.Empty;

        var cleaned = new string(eventName
            .ToLowerInvariant()
            .TrimEnd()
            .TrimStart()
            .Replace(" ", "-")
            .Where(c => char.IsLetterOrDigit(c) || c == '-')
            .ToArray());

        return $"{cleaned}";
    }
}