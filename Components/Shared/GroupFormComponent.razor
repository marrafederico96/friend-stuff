@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.Group
@using FriendStuff.Features.Group.DTOs

@inject IGroupService GroupService
@inject NavigationManager NavigationManager

@rendermode  InteractiveServer

<MudPaper Class="pa-4">
    <EditForm Model="GroupData" FormName="GroupForm" OnValidSubmit="Submit">
        <MudTextField T="string" @bind-Value="GroupData.GroupName"  Label="Group Name"/>
        @if (!string.IsNullOrEmpty(_error))
        {
            <MudText Color="Color.Error">@_error</MudText>
        }
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto mt-2 mb-2">Create Group</MudButton>
    </EditForm>
</MudPaper>

@code {
    private GroupDto GroupData { get; set; } = new GroupDto();
    private string? _error = string.Empty;
    
    [Parameter]
    public UserInfoDto? UserInfo { get; set; }
    
    private async Task Submit()
    {
        try
        {
            if (UserInfo != null)
            {
                GroupData.AdminUsername = UserInfo.Username;
            }

            await GroupService.CreateGroup(GroupData);
            GroupData = new GroupDto();
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        
    }
}
