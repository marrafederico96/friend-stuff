@using FriendStuff.Domain.Entities.Enums
@using FriendStuff.Features.Auth.DTOs
@using FriendStuff.Features.Group.DTOs
@using FriendStuff.Features.Group.Member

@inject IGroupMemberService GroupMemberService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@if (_group != null && _group.AdminUsername.Equals(UserInfo.Username))
{
    <MudPaper Class="pa-4" Elevation="3">
        <EditForm Model="UsernameDto" FormName="GroupMemberForm" OnValidSubmit="SearchUser">
            <MudText Typo="Typo.h6">Add Member</MudText>
            <MudTextField @bind-Value="UsernameDto.Username"
                          Placeholder="Search by username"
                          Variant="Variant.Outlined"
                          Immediate="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          For="@(() => UsernameDto.Username)" />

            @if (!string.IsNullOrEmpty(_error))
            {
                <MudText Color="Color.Error" Class="mt-2">@_error</MudText>
            }

            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mt-2">
                Search
            </MudButton>

            @if (_userFound != null)
            {
                <MudPaper Elevation="3" Class="mt-2 mb-2 pa-2">
                        <MudText Typo="Typo.subtitle1">@_userFound.Username</MudText>
                        <MudText Typo="Typo.caption">
                            @_userFound.FirstName @_userFound.LastName
                        </MudText>
                    <MudButton Class="ml-2" Color="Color.Success" OnClick="@AddMember">
                        Add
                    </MudButton>
                </MudPaper>
            }
        </EditForm>
    </MudPaper>
}

<MudList T="object" Dense="false" Class="my-4">
    @foreach (var member in _groupMember)
    {
        <MudListItem Class="py-2">
            <MudListItem>
                <MudText Typo="Typo.subtitle1">@member.Username</MudText>
                <MudText Typo="Typo.caption">
                    Role: <MudChip Color="Color.Info" Variant="Variant.Outlined" Size="Size.Small">@member.MemberRole</MudChip>
                    <span class="ml-2">Joined: @member.JoinDate.ToString("dd/MM/yyyy")</span>
                </MudText>
            </MudListItem>

            @if (member.MemberRole == MemberRole.Member)
            {
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => RemoveMember(member.Username))"
                               Tooltip="Remove member" />
            }
        </MudListItem>
        <MudDivider />
    }
</MudList>

@code {
    [Parameter] public required UserInfoDto UserInfo { get; set; }
    [Parameter] public string? GroupName { get; set; }

    private UsernameDto UsernameDto { get; set; } = new UsernameDto();
    private UserInfoDto? _userFound;
    private GroupDto? _group;
    private List<GroupMemberDto> _groupMember = [];
    private string? _error;
    
    protected override void OnInitialized()
    {
        _group = UserInfo.UserGroups
            .FirstOrDefault(g => g.NormalizeGroupName.Equals(GroupName));
        if (_group != null) _groupMember = _group.GroupMembers;
        _error = string.Empty;
    }

    private async Task SearchUser()
    {
        try
        {
        _userFound = await GroupMemberService.SearchUser(UsernameDto.Username);
        UsernameDto = new UsernameDto();
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
    }

    private async Task AddMember()
    {
        try
        {
            if (_userFound != null && GroupName != null)
            {
                await GroupMemberService.AddMember(_userFound.Username, GroupName, UserInfo.Username);
                NavigationManager.Refresh();
            }
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
    }

    private async Task RemoveMember(string memberUsername)
    {
        try
        {
            if (GroupName != null && _group != null)
            {
                await GroupMemberService.RemoveMember(memberUsername, GroupName, _group.AdminUsername);
                if (!memberUsername.Equals(_group.AdminUsername))
                {
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                NavigationManager.Refresh();
            }
        }
        catch (ArgumentException e)
        {
            _error = e.Message;
        }
    }
}